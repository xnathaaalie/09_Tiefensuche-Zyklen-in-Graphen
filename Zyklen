package A09_ZyklenTiefensuche;

import java.util.ArrayList;
import java.util.List;

import javax.print.attribute.standard.RequestingUserName;

import basisAlgorithmen.Graph;
import basisAlgorithmen.WeightedEdge;
import basisAlgorithmen.FindWay;

public class Zyklen {

	private Graph g;

	public Zyklen(Graph g) {
		this.g = g;

	}

	/**
	 * Retourniert einen Zyklus eines Graphen, sofern einer existiert
	 * @param g zu prï¿½fender Graph
	 * @return Anzahl der Komponenten
	 */
	public List<Integer> getCycle() {
		System.out.println("\nSuche Zyklus...");
		for (int i = 0; i < g.numVertices(); i++)
		{
			//this.VisitedVertices = new ArrayList<>();
			ArrayList<Integer> Start = new ArrayList<Integer>();
			Start.add(i);
			ArrayList<Integer> CyclePath = getACycle(Start);
			if (CyclePath != null)
			{
				System.out.println("Gefundener Zyklus:");
				System.out.println(CyclePath);
				return CyclePath;
			}

		}
		System.out.println("Kein Zyklus gefunden!:");
		return null;
	}

	private ArrayList<Integer> getACycle(ArrayList<Integer> gonePath)
	{
		System.out.println(gonePath);
		int ActV = getActVofPath(gonePath);
		ArrayList<Integer> PrevPath = getPathBeforeAct(gonePath);
		if (PrevPath.contains(ActV))
		{
			ArrayList<Integer> Cycle = new ArrayList<Integer>();
			for (int i = gonePath.indexOf(ActV); i < gonePath.size(); i++)
			{
				Cycle.add(gonePath.get(i));
			}
			return Cycle;
		}

		for (Integer V : this.getPossibleVs(gonePath)) {

			ArrayList<Integer> NewPath = (ArrayList<Integer>) gonePath.clone();
			NewPath.add(V);
			ArrayList<Integer> CyclePath = this.getACycle(NewPath);
			if (CyclePath != null)
				return CyclePath;
		}

		return null;
	}

	private ArrayList<Integer> getPathBeforeAct(ArrayList<Integer> gonePath)
	{
		ArrayList<Integer> PrevPath = new ArrayList<Integer>();
		for (int i = 0; i < gonePath.size() - 1; i++)
		{
			PrevPath.add(gonePath.get(i));
		}
		return PrevPath;
	}

	private ArrayList<Integer> getPossibleVs(ArrayList<Integer> gonePath)
	{
		int ActV = getActVofPath(gonePath);
		ArrayList<Integer> PossibleVs = this.getNextVs(ActV);
		if (!g.isDirected() && gonePath.size() > 1)
		{
			int PrevV = getNthLastV(gonePath, 1);
			PossibleVs.remove((Integer) PrevV);
		}
		return PossibleVs;
	}

	private int getNthLastV(ArrayList<Integer> gonePath, int n)
	{
		if (n >= gonePath.size())
			n = 0;
		return gonePath.get(gonePath.size() - 1 - n);
	}

	private int getActVofPath(ArrayList<Integer> gonePath)
	{
		return gonePath.get(gonePath.size() - 1);
	}

	private ArrayList<Integer> getNextVs(int actV)
	{
		ArrayList<Integer> NextVs = new ArrayList<Integer>();

		for (WeightedEdge Edge : g.getEdges(actV)) {

			if (g.isDirected())
			{
				if (Edge.to_vertex != actV)
					NextVs.add(Edge.to_vertex);
			}
			else
			{
				if (Edge.to_vertex != actV)
					NextVs.add(Edge.to_vertex);
				else if (Edge.from_vertex != actV)
					NextVs.add(Edge.from_vertex);
			}

		}

		return NextVs;
	}



}



